// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gopowerstore "github.com/dell/gopowerstore"
	api "github.com/dell/gopowerstore/api"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// APIClient mocks base method
func (m *MockClient) APIClient() api.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIClient")
	ret0, _ := ret[0].(api.Client)
	return ret0
}

// APIClient indicates an expected call of APIClient
func (mr *MockClientMockRecorder) APIClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIClient", reflect.TypeOf((*MockClient)(nil).APIClient))
}

// SetTraceID mocks base method
func (m *MockClient) SetTraceID(ctx context.Context, value string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTraceID", ctx, value)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetTraceID indicates an expected call of SetTraceID
func (mr *MockClientMockRecorder) SetTraceID(ctx, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceID", reflect.TypeOf((*MockClient)(nil).SetTraceID), ctx, value)
}

// SetCustomHTTPHeaders mocks base method
func (m *MockClient) SetCustomHTTPHeaders(headers http.Header) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCustomHTTPHeaders", headers)
}

// SetCustomHTTPHeaders indicates an expected call of SetCustomHTTPHeaders
func (mr *MockClientMockRecorder) SetCustomHTTPHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomHTTPHeaders", reflect.TypeOf((*MockClient)(nil).SetCustomHTTPHeaders), headers)
}

// GetVolume mocks base method
func (m *MockClient) GetVolume(ctx context.Context, id string) (gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", ctx, id)
	ret0, _ := ret[0].(gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume
func (mr *MockClientMockRecorder) GetVolume(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockClient)(nil).GetVolume), ctx, id)
}

// GetVolumeByName mocks base method
func (m *MockClient) GetVolumeByName(ctx context.Context, name string) (gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", ctx, name)
	ret0, _ := ret[0].(gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName
func (mr *MockClientMockRecorder) GetVolumeByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName", reflect.TypeOf((*MockClient)(nil).GetVolumeByName), ctx, name)
}

// GetVolumes mocks base method
func (m *MockClient) GetVolumes(ctx context.Context) ([]gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", ctx)
	ret0, _ := ret[0].([]gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes
func (mr *MockClientMockRecorder) GetVolumes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockClient)(nil).GetVolumes), ctx)
}

// CreateVolume mocks base method
func (m *MockClient) CreateVolume(ctx context.Context, createParams *gopowerstore.VolumeCreate) (gopowerstore.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, createParams)
	ret0, _ := ret[0].(gopowerstore.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockClientMockRecorder) CreateVolume(ctx, createParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockClient)(nil).CreateVolume), ctx, createParams)
}

// DeleteVolume mocks base method
func (m *MockClient) DeleteVolume(ctx context.Context, deleteParams *gopowerstore.VolumeDelete, id string) (gopowerstore.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, deleteParams, id)
	ret0, _ := ret[0].(gopowerstore.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockClientMockRecorder) DeleteVolume(ctx, deleteParams, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockClient)(nil).DeleteVolume), ctx, deleteParams, id)
}

// GetHost mocks base method
func (m *MockClient) GetHost(ctx context.Context, id string) (gopowerstore.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost", ctx, id)
	ret0, _ := ret[0].(gopowerstore.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHost indicates an expected call of GetHost
func (mr *MockClientMockRecorder) GetHost(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockClient)(nil).GetHost), ctx, id)
}

// GetHostByName mocks base method
func (m *MockClient) GetHostByName(ctx context.Context, name string) (gopowerstore.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByName", ctx, name)
	ret0, _ := ret[0].(gopowerstore.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByName indicates an expected call of GetHostByName
func (mr *MockClientMockRecorder) GetHostByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByName", reflect.TypeOf((*MockClient)(nil).GetHostByName), ctx, name)
}

// GetHosts mocks base method
func (m *MockClient) GetHosts(ctx context.Context) ([]gopowerstore.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHosts", ctx)
	ret0, _ := ret[0].([]gopowerstore.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHosts indicates an expected call of GetHosts
func (mr *MockClientMockRecorder) GetHosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHosts", reflect.TypeOf((*MockClient)(nil).GetHosts), ctx)
}

// CreateHost mocks base method
func (m *MockClient) CreateHost(ctx context.Context, createParams *gopowerstore.HostCreate) (gopowerstore.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, createParams)
	ret0, _ := ret[0].(gopowerstore.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost
func (mr *MockClientMockRecorder) CreateHost(ctx, createParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockClient)(nil).CreateHost), ctx, createParams)
}

// DeleteHost mocks base method
func (m *MockClient) DeleteHost(ctx context.Context, deleteParams *gopowerstore.HostDelete, id string) (gopowerstore.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHost", ctx, deleteParams, id)
	ret0, _ := ret[0].(gopowerstore.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHost indicates an expected call of DeleteHost
func (mr *MockClientMockRecorder) DeleteHost(ctx, deleteParams, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHost", reflect.TypeOf((*MockClient)(nil).DeleteHost), ctx, deleteParams, id)
}

// ModifyHost mocks base method
func (m *MockClient) ModifyHost(ctx context.Context, modifyParams *gopowerstore.HostModify, id string) (gopowerstore.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyHost", ctx, modifyParams, id)
	ret0, _ := ret[0].(gopowerstore.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyHost indicates an expected call of ModifyHost
func (mr *MockClientMockRecorder) ModifyHost(ctx, modifyParams, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyHost", reflect.TypeOf((*MockClient)(nil).ModifyHost), ctx, modifyParams, id)
}

// GetHostVolumeMappings mocks base method
func (m *MockClient) GetHostVolumeMappings(ctx context.Context) ([]gopowerstore.HostVolumeMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostVolumeMappings", ctx)
	ret0, _ := ret[0].([]gopowerstore.HostVolumeMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostVolumeMappings indicates an expected call of GetHostVolumeMappings
func (mr *MockClientMockRecorder) GetHostVolumeMappings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostVolumeMappings", reflect.TypeOf((*MockClient)(nil).GetHostVolumeMappings), ctx)
}

// GetHostVolumeMapping mocks base method
func (m *MockClient) GetHostVolumeMapping(ctx context.Context, id string) (gopowerstore.HostVolumeMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostVolumeMapping", ctx, id)
	ret0, _ := ret[0].(gopowerstore.HostVolumeMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostVolumeMapping indicates an expected call of GetHostVolumeMapping
func (mr *MockClientMockRecorder) GetHostVolumeMapping(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostVolumeMapping", reflect.TypeOf((*MockClient)(nil).GetHostVolumeMapping), ctx, id)
}

// GetHostVolumeMappingByVolumeID mocks base method
func (m *MockClient) GetHostVolumeMappingByVolumeID(ctx context.Context, volumeID string) ([]gopowerstore.HostVolumeMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostVolumeMappingByVolumeID", ctx, volumeID)
	ret0, _ := ret[0].([]gopowerstore.HostVolumeMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostVolumeMappingByVolumeID indicates an expected call of GetHostVolumeMappingByVolumeID
func (mr *MockClientMockRecorder) GetHostVolumeMappingByVolumeID(ctx, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostVolumeMappingByVolumeID", reflect.TypeOf((*MockClient)(nil).GetHostVolumeMappingByVolumeID), ctx, volumeID)
}

// AttachVolumeToHost mocks base method
func (m *MockClient) AttachVolumeToHost(ctx context.Context, hostID string, attachParams *gopowerstore.HostVolumeAttach) (gopowerstore.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolumeToHost", ctx, hostID, attachParams)
	ret0, _ := ret[0].(gopowerstore.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolumeToHost indicates an expected call of AttachVolumeToHost
func (mr *MockClientMockRecorder) AttachVolumeToHost(ctx, hostID, attachParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolumeToHost", reflect.TypeOf((*MockClient)(nil).AttachVolumeToHost), ctx, hostID, attachParams)
}

// DetachVolumeFromHost mocks base method
func (m *MockClient) DetachVolumeFromHost(ctx context.Context, hostID string, detachParams *gopowerstore.HostVolumeDetach) (gopowerstore.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolumeFromHost", ctx, hostID, detachParams)
	ret0, _ := ret[0].(gopowerstore.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolumeFromHost indicates an expected call of DetachVolumeFromHost
func (mr *MockClientMockRecorder) DetachVolumeFromHost(ctx, hostID, detachParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolumeFromHost", reflect.TypeOf((*MockClient)(nil).DetachVolumeFromHost), ctx, hostID, detachParams)
}

// GetStorageISCSITargetAddresses mocks base method
func (m *MockClient) GetStorageISCSITargetAddresses(ctx context.Context) ([]gopowerstore.IPPoolAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageISCSITargetAddresses", ctx)
	ret0, _ := ret[0].([]gopowerstore.IPPoolAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageISCSITargetAddresses indicates an expected call of GetStorageISCSITargetAddresses
func (mr *MockClientMockRecorder) GetStorageISCSITargetAddresses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageISCSITargetAddresses", reflect.TypeOf((*MockClient)(nil).GetStorageISCSITargetAddresses), ctx)
}

// GetApplianceListCMA mocks base method
func (m *MockClient) GetApplianceListCMA(ctx context.Context) ([]gopowerstore.Appliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplianceListCMA", ctx)
	ret0, _ := ret[0].([]gopowerstore.Appliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplianceListCMA indicates an expected call of GetApplianceListCMA
func (mr *MockClientMockRecorder) GetApplianceListCMA(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplianceListCMA", reflect.TypeOf((*MockClient)(nil).GetApplianceListCMA), ctx)
}

// GetCapacity mocks base method
func (m *MockClient) GetCapacity(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapacity", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapacity indicates an expected call of GetCapacity
func (mr *MockClientMockRecorder) GetCapacity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapacity", reflect.TypeOf((*MockClient)(nil).GetCapacity), ctx)
}

// GetFCPorts mocks base method
func (m *MockClient) GetFCPorts(ctx context.Context) ([]gopowerstore.FcPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCPorts", ctx)
	ret0, _ := ret[0].([]gopowerstore.FcPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCPorts indicates an expected call of GetFCPorts
func (mr *MockClientMockRecorder) GetFCPorts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCPorts", reflect.TypeOf((*MockClient)(nil).GetFCPorts), ctx)
}

// GetFCPort mocks base method
func (m *MockClient) GetFCPort(ctx context.Context, id string) (gopowerstore.FcPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFCPort", ctx, id)
	ret0, _ := ret[0].(gopowerstore.FcPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFCPort indicates an expected call of GetFCPort
func (mr *MockClientMockRecorder) GetFCPort(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFCPort", reflect.TypeOf((*MockClient)(nil).GetFCPort), ctx, id)
}

// SetLogger mocks base method
func (m *MockClient) SetLogger(logger gopowerstore.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", logger)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockClientMockRecorder) SetLogger(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockClient)(nil).SetLogger), logger)
}

// CreateSnapshot mocks base method
func (m *MockClient) CreateSnapshot(ctx context.Context, createSnapParams *gopowerstore.SnapshotCreate, id string) (gopowerstore.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, createSnapParams, id)
	ret0, _ := ret[0].(gopowerstore.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot
func (mr *MockClientMockRecorder) CreateSnapshot(ctx, createSnapParams, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockClient)(nil).CreateSnapshot), ctx, createSnapParams, id)
}

// DeleteSnapshot mocks base method
func (m *MockClient) DeleteSnapshot(ctx context.Context, deleteParams *gopowerstore.VolumeDelete, id string) (gopowerstore.EmptyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, deleteParams, id)
	ret0, _ := ret[0].(gopowerstore.EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot
func (mr *MockClientMockRecorder) DeleteSnapshot(ctx, deleteParams, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockClient)(nil).DeleteSnapshot), ctx, deleteParams, id)
}

// GetSnapshotsByVolumeID mocks base method
func (m *MockClient) GetSnapshotsByVolumeID(ctx context.Context, volID string) ([]gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotsByVolumeID", ctx, volID)
	ret0, _ := ret[0].([]gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotsByVolumeID indicates an expected call of GetSnapshotsByVolumeID
func (mr *MockClientMockRecorder) GetSnapshotsByVolumeID(ctx, volID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotsByVolumeID", reflect.TypeOf((*MockClient)(nil).GetSnapshotsByVolumeID), ctx, volID)
}

// GetSnapshots mocks base method
func (m *MockClient) GetSnapshots(ctx context.Context) ([]gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshots", ctx)
	ret0, _ := ret[0].([]gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots
func (mr *MockClientMockRecorder) GetSnapshots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockClient)(nil).GetSnapshots), ctx)
}

// GetSnapshot mocks base method
func (m *MockClient) GetSnapshot(ctx context.Context, snapID string) (gopowerstore.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, snapID)
	ret0, _ := ret[0].(gopowerstore.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot
func (mr *MockClientMockRecorder) GetSnapshot(ctx, snapID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockClient)(nil).GetSnapshot), ctx, snapID)
}

// CreateVolumeFromSnapshot mocks base method
func (m *MockClient) CreateVolumeFromSnapshot(ctx context.Context, createParams *gopowerstore.VolumeClone, snapID string) (gopowerstore.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeFromSnapshot", ctx, createParams, snapID)
	ret0, _ := ret[0].(gopowerstore.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeFromSnapshot indicates an expected call of CreateVolumeFromSnapshot
func (mr *MockClientMockRecorder) CreateVolumeFromSnapshot(ctx, createParams, snapID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeFromSnapshot", reflect.TypeOf((*MockClient)(nil).CreateVolumeFromSnapshot), ctx, createParams, snapID)
}
